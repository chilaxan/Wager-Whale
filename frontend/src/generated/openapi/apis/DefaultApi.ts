/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Stream,
  User,
  UserCreate,
  UserLogin,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    StreamFromJSON,
    StreamToJSON,
    UserFromJSON,
    UserToJSON,
    UserCreateFromJSON,
    UserCreateToJSON,
    UserLoginFromJSON,
    UserLoginToJSON,
} from '../models/index';

export interface CreateUserUsersPostRequest {
    userCreate: UserCreate;
}

export interface GetSelfSelfGetRequest {
    auth?: string | null;
}

export interface GetStreamStreamsStreamIdGetRequest {
    streamId: string;
}

export interface GetStreamsStreamsGetRequest {
    auth?: string | null;
}

export interface LoginLoginPostRequest {
    userLogin: UserLogin;
}

export interface ReadUserUsersUserIdGetRequest {
    userId: number;
}

export interface ReadUsersUsersGetRequest {
    skip?: number;
    limit?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create User
     */
    async createUserUsersPostRaw(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userCreate === null || requestParameters.userCreate === undefined) {
            throw new runtime.RequiredError('userCreate','Required parameter requestParameters.userCreate was null or undefined when calling createUserUsersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters.userCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Create User
     */
    async createUserUsersPost(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createUserUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Self
     */
    async getSelfSelfGetRaw(requestParameters: GetSelfSelfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get Self
     */
    async getSelfSelfGet(requestParameters: GetSelfSelfGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getSelfSelfGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Stream
     */
    async getStreamStreamsStreamIdGetRaw(requestParameters: GetStreamStreamsStreamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.streamId === null || requestParameters.streamId === undefined) {
            throw new runtime.RequiredError('streamId','Required parameter requestParameters.streamId was null or undefined when calling getStreamStreamsStreamIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/streams/{stream_id}`.replace(`{${"stream_id"}}`, encodeURIComponent(String(requestParameters.streamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Stream
     */
    async getStreamStreamsStreamIdGet(requestParameters: GetStreamStreamsStreamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getStreamStreamsStreamIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get Streams
     */
    async getStreamsStreamsGetRaw(requestParameters: GetStreamsStreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Stream>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/streams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StreamFromJSON));
    }

    /**
     * Get Streams
     */
    async getStreamsStreamsGet(requestParameters: GetStreamsStreamsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Stream>> {
        const response = await this.getStreamsStreamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginLoginPostRaw(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userLogin === null || requestParameters.userLogin === undefined) {
            throw new runtime.RequiredError('userLogin','Required parameter requestParameters.userLogin was null or undefined when calling loginLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginToJSON(requestParameters.userLogin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Login
     */
    async loginLoginPost(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.loginLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout
     */
    async logoutLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout
     */
    async logoutLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutLogoutPostRaw(initOverrides);
    }

    /**
     * Read User
     */
    async readUserUsersUserIdGetRaw(requestParameters: ReadUserUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling readUserUsersUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Read User
     */
    async readUserUsersUserIdGet(requestParameters: ReadUserUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.readUserUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Users
     */
    async readUsersUsersGetRaw(requestParameters: ReadUsersUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Read Users
     */
    async readUsersUsersGet(requestParameters: ReadUsersUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.readUsersUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Root
     */
    async rootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Root
     */
    async rootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rootGetRaw(initOverrides);
    }

}
